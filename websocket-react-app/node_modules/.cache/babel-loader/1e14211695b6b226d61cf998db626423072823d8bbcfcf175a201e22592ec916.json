{"ast":null,"code":"var _jsxFileName = \"/Users/nedjamta/development/github-nedspnt/go-websocket/websocket-react-app/src/WebSocketComponent.js\",\n  _s = $RefreshSig$();\n// WebSocketComponent.js\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketComponent = () => {\n  _s();\n  const [websocket, setWebsocket] = useState(null);\n  const [message, setMessage] = useState({\n    username: '',\n    message: ''\n  });\n  const [inputMessage, setInputMessage] = useState('');\n  useEffect(() => {\n    // Connect to the WebSocket server\n    const ws = new WebSocket('ws://localhost:8080/echo');\n\n    // Set up event listeners\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    ws.on('message', function incoming(data) {\n      console.log(data);\n    });\n\n    // ws.onmessage = (event) => {\n    //   const receivedMessage = JSON.parse(event.data);\n    //   console.log(receivedMessage)\n    //   setMessage(receivedMessage.text);\n    // };\n\n    ws.onclose = () => {\n      console.log('WebSocket closed');\n    };\n\n    // Save the WebSocket connection in state\n    setWebsocket(ws);\n\n    // Clean up on component unmount\n    return () => {\n      ws.close();\n    };\n  }, []); // Empty dependency array ensures this effect runs once on component mount\n\n  const sendMessage = () => {\n    // Send a JSON message to the server\n    const messageObject = {\n      text: inputMessage\n    };\n    websocket.send(JSON.stringify(messageObject));\n    setInputMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WebSocket Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Received message from \", message.username, \": \", message.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Received message from server: \", message.JSON]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketComponent, \"VYKLSWobPvUs5poJmZkPo8J7S6k=\");\n_c = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WebSocketComponent","_s","websocket","setWebsocket","message","setMessage","username","inputMessage","setInputMessage","ws","WebSocket","onopen","console","log","on","incoming","data","onclose","close","sendMessage","messageObject","text","send","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/nedjamta/development/github-nedspnt/go-websocket/websocket-react-app/src/WebSocketComponent.js"],"sourcesContent":["// WebSocketComponent.js\nimport React, { useEffect, useState } from 'react';\n\nconst WebSocketComponent = () => {\n  const [websocket, setWebsocket] = useState(null);\n  const [message, setMessage] = useState({ username: '', message: '' });\n  const [inputMessage, setInputMessage] = useState('');\n\n  useEffect(() => {\n    // Connect to the WebSocket server\n    const ws = new WebSocket('ws://localhost:8080/echo');\n\n    // Set up event listeners\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n\n    ws.on('message', function incoming(data) {\n        console.log(data);\n    })\n\n    // ws.onmessage = (event) => {\n    //   const receivedMessage = JSON.parse(event.data);\n    //   console.log(receivedMessage)\n    //   setMessage(receivedMessage.text);\n    // };\n\n    ws.onclose = () => {\n      console.log('WebSocket closed');\n    };\n\n    // Save the WebSocket connection in state\n    setWebsocket(ws);\n\n    // Clean up on component unmount\n    return () => {\n      ws.close();\n    };\n  }, []); // Empty dependency array ensures this effect runs once on component mount\n\n  const sendMessage = () => {\n    // Send a JSON message to the server\n    const messageObject = { text: inputMessage };\n    websocket.send(JSON.stringify(messageObject));\n    setInputMessage('');\n  };\n\n  return (\n    <div>\n      <h1>WebSocket Chat</h1>\n      <div>\n        <p>\n          Received message from {message.username}: {message.message}\n        </p>\n      </div>\n      <div>\n        <input\n          type=\"text\"\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n        />\n        <button onClick={sendMessage}>Send Message</button>\n        <p>Received message from server: {message.JSON}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WebSocketComponent;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,QAAQ,EAAE,EAAE;IAAEF,OAAO,EAAE;EAAG,CAAC,CAAC;EACrE,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,EAAE,GAAG,IAAIC,SAAS,CAAC,0BAA0B,CAAC;;IAEpD;IACAD,EAAE,CAACE,MAAM,GAAG,MAAM;MAChBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAEDJ,EAAE,CAACK,EAAE,CAAC,SAAS,EAAE,SAASC,QAAQA,CAACC,IAAI,EAAE;MACrCJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;IACrB,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;;IAEAP,EAAE,CAACQ,OAAO,GAAG,MAAM;MACjBL,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACjC,CAAC;;IAED;IACAV,YAAY,CAACM,EAAE,CAAC;;IAEhB;IACA,OAAO,MAAM;MACXA,EAAE,CAACS,KAAK,CAAC,CAAC;IACZ,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,MAAMC,aAAa,GAAG;MAAEC,IAAI,EAAEd;IAAa,CAAC;IAC5CL,SAAS,CAACoB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC,CAAC;IAC7CZ,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,oBACET,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB9B,OAAA;MAAA0B,QAAA,eACE1B,OAAA;QAAA0B,QAAA,GAAG,wBACqB,EAACrB,OAAO,CAACE,QAAQ,EAAC,IAAE,EAACF,OAAO,CAACA,OAAO;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN9B,OAAA;MAAA0B,QAAA,gBACE1B,OAAA;QACE+B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAExB,YAAa;QACpByB,QAAQ,EAAGC,CAAC,IAAKzB,eAAe,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACF9B,OAAA;QAAQoC,OAAO,EAAEhB,WAAY;QAAAM,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnD9B,OAAA;QAAA0B,QAAA,GAAG,gCAA8B,EAACrB,OAAO,CAACmB,IAAI;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA/DID,kBAAkB;AAAAoC,EAAA,GAAlBpC,kBAAkB;AAiExB,eAAeA,kBAAkB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}